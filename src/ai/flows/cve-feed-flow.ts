'use server';
/**
 * @fileOverview An AI flow for generating a simulated live CVE feed.
 *
 * - getCveFeed - A function that returns a list of recent CVEs.
 * - CveFeedOutput - The return type for the getCveFeed function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CveSchema = z.object({
  id: z.string().describe('The CVE identifier (e.g., CVE-2024-12345).'),
  description: z.string().describe('A brief description of the vulnerability.'),
  cvssScore: z.number().min(0).max(10).describe('The CVSS v3.1 base score.'),
  publishedDate: z.string().describe('The date the CVE was published (YYYY-MM-DD).'),
});

const CveFeedOutputSchema = z.object({
  cves: z.array(CveSchema).describe('A list of 5 to 7 recent and critical vulnerabilities.'),
});
export type CveFeedOutput = z.infer<typeof CveFeedOutputSchema>;

export async function getCveFeed(): Promise<CveFeedOutput> {
  return cveFeedFlow();
}

const prompt = ai.definePrompt({
  name: 'cveFeedPrompt',
  output: {schema: CveFeedOutputSchema},
  prompt: `You are a CVE feed aggregator for a cybersecurity platform.
  Your task is to generate a list of 5 to 7 recent, critical, and realistic-sounding (but not necessarily real) vulnerabilities.
  Provide a mix of vulnerabilities affecting different types of software (e.g., web frameworks, operating systems, popular libraries).
  Ensure the CVSS scores reflect the potential severity.
  `,
});

const cveFeedFlow = ai.defineFlow(
  {
    name: 'cveFeedFlow',
    outputSchema: CveFeedOutputSchema,
  },
  async () => {
    const {output} = await prompt();
    return output!;
  }
);
