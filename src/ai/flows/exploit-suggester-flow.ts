'use server';
/**
 * @fileOverview An AI flow for suggesting potential exploits for software.
 *
 * - suggestExploits - A function that suggests exploits based on a product and version.
 * - ExploitSuggesterInput - The input type for the function.
 * - ExploitSuggesterOutput - The return type for the function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ExploitSuggesterInputSchema = z.object({
  product: z.string().describe('The name of the software product (e.g., "Apache httpd", "Microsoft Windows Server 2019").'),
  version: z.string().describe('The version of the software product (e.g., "2.4.52", "10.0.17763").'),
});
export type ExploitSuggesterInput = z.infer<typeof ExploitSuggesterInputSchema>;

const ExploitSchema = z.object({
    cveId: z.string().describe('The CVE identifier for the vulnerability (e.g., "CVE-2021-41773").'),
    description: z.string().describe('A brief description of the vulnerability and the exploit.'),
    exploitabilityScore: z.number().min(1).max(10).describe('A simulated score from 1-10 indicating how easy the exploit is to use (1=complex, 10=trivial).'),
    notes: z.string().describe('Brief notes on the exploit, such as the type of vulnerability (e.g., "Path Traversal", "RCE") and any requirements.'),
});

const ExploitSuggesterOutputSchema = z.object({
  exploits: z.array(ExploitSchema).describe('A list of 2-4 potential exploits for the given software.'),
});
export type ExploitSuggesterOutput = z.infer<typeof ExploitSuggesterOutputSchema>;

export async function suggestExploits(input: ExploitSuggesterInput): Promise<ExploitSuggesterOutput> {
  return exploitSuggesterFlow(input);
}

const prompt = ai.definePrompt({
  name: 'exploitSuggesterPrompt',
  input: {schema: ExploitSuggesterInputSchema},
  output: {schema: ExploitSuggesterOutputSchema},
  prompt: `You are an expert vulnerability researcher and exploit database curator.
Your task is to suggest potential public exploits for a given software product and version.

Product: {{{product}}}
Version: {{{version}}}

Generate a list of 2 to 4 realistic-sounding (but not necessarily real) public exploits that might affect this software.
- Provide a valid-looking CVE ID.
- Write a concise description of the vulnerability.
- Assign an exploitability score from 1 (very complex) to 10 (trivial, script-kiddie level).
- Add brief notes about the exploit type or requirements.

The output should be for simulation and training purposes. Do not include any actual exploit code.
`,
});

const exploitSuggesterFlow = ai.defineFlow(
  {
    name: 'exploitSuggesterFlow',
    inputSchema: ExploitSuggesterInputSchema,
    outputSchema: ExploitSuggesterOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
