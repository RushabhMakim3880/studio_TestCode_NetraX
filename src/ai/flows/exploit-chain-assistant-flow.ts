'use server';
/**
 * @fileOverview An AI flow for analyzing how multiple vulnerabilities can be chained together.
 *
 * - generateExploitChain - A function that suggests exploit chains from a list of vulnerabilities.
 * - ExploitChainAssistantInput - The input type for the function.
 * - ExploitChainAssistantOutput - The return type for the function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const VulnerabilitySchema = z.object({
  id: z.string().describe('A unique identifier for the vulnerability provided in the input.'),
  name: z.string().describe('The name of the vulnerability.'),
  description: z.string().describe('A description of the vulnerability.'),
  severity: z.enum(['Critical', 'High', 'Medium', 'Low', 'Informational']).describe('The severity of the vulnerability.'),
});

export const ExploitChainAssistantInputSchema = z.object({
  vulnerabilities: z.array(VulnerabilitySchema).describe('A list of individual vulnerabilities that have been discovered.'),
});
export type ExploitChainAssistantInput = z.infer<typeof ExploitChainAssistantInputSchema>;

const ExploitChainSchema = z.object({
    title: z.string().describe('A concise, descriptive title for the exploit chain (e.g., "Initial Access via XSS to Data Exfiltration").'),
    description: z.string().describe('A step-by-step explanation of how the vulnerabilities can be combined to achieve a greater impact. Explain the logical flow of the attack.'),
    vulnerabilityIds: z.array(z.string()).describe('An array of the unique `id` fields of the vulnerabilities from the input that are used in this chain.'),
});

export const ExploitChainAssistantOutputSchema = z.object({
  chains: z.array(ExploitChainSchema).describe('A list of 1-3 plausible exploit chains. If no logical chain can be formed, return an empty array.'),
});
export type ExploitChainAssistantOutput = z.infer<typeof ExploitChainAssistantOutputSchema>;

export async function generateExploitChain(input: ExploitChainAssistantInput): Promise<ExploitChainAssistantOutput> {
  return exploitChainAssistantFlow(input);
}

const prompt = ai.definePrompt({
  name: 'exploitChainAssistantPrompt',
  input: {schema: ExploitChainAssistantInputSchema},
  output: {schema: ExploitChainAssistantOutputSchema},
  prompt: `You are a master penetration tester and security strategist. Your task is to analyze a list of individual, seemingly disconnected vulnerabilities and identify creative ways they could be chained together to achieve a more significant impact.

Here is the list of discovered vulnerabilities:
{{#each vulnerabilities}}
- ID: {{{id}}}
  Name: {{{name}}}
  Severity: {{{severity}}}
  Description: {{{description}}}
{{/each}}

Analyze the list and generate 1 to 3 plausible exploit chains. For each chain:
1.  Provide a clear title that summarizes the attack.
2.  Write a step-by-step description explaining the logical flow of how an attacker would combine these specific vulnerabilities.
3.  List the exact IDs of the vulnerabilities from the input that are used in your proposed chain.

Focus on logical and realistic scenarios. If you cannot find any plausible way to chain the given vulnerabilities, return an empty array for the 'chains' field. Do not invent new vulnerabilities.
`,
});

const exploitChainAssistantFlow = ai.defineFlow(
  {
    name: 'exploitChainAssistantFlow',
    inputSchema: ExploitChainAssistantInputSchema,
    outputSchema: ExploitChainAssistantOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
