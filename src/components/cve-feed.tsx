
'use client';

import { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { getCveFeed, type CveFeedOutput } from '@/ai/flows/cve-feed-flow';
import { Loader2, AlertTriangle, Rss } from 'lucide-react';

const getSeverity = (score: number): string => {
  if (score >= 9.0) return 'Critical';
  if (score >= 7.0) return 'High';
  if (score >= 4.0) return 'Medium';
  if (score > 0) return 'Low';
  return 'None';
};

const getScoreColor = (score: number): 'destructive' | 'secondary' | 'default' | 'outline' => {
  if (score >= 9.0) return 'destructive';
  if (score >= 7.0) return 'destructive'; // High should also be prominent
  if (score >= 4.0) return 'secondary'; // Medium
  if (score > 0) return 'default'; // Low
  return 'outline'; // None
};

export function CveFeed() {
  const [feed, setFeed] = useState<CveFeedOutput['cves'] | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchFeed() {
      setIsLoading(true);
      setError(null);
      try {
        const response = await getCveFeed();
        setFeed(response.cves);
      } catch (err) {
        if (err instanceof Error && (err.message.includes('503') || err.message.toLowerCase().includes('overloaded'))) {
            setError('The CVE feed is temporarily overloaded. Please try again in a moment.');
        } else {
            setError('Failed to fetch CVE feed. Please try again later.');
        }
        console.error(err);
      } finally {
        setIsLoading(false);
      }
    }
    fetchFeed();
  }, []);

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center gap-3">
            <Rss className="h-6 w-6" />
            <CardTitle>Live CVE Feed</CardTitle>
        </div>
        <CardDescription>A real-time feed of the latest vulnerabilities.</CardDescription>
      </CardHeader>
      <CardContent>
        {isLoading && (
          <div className="flex items-center justify-center h-40 gap-2 text-muted-foreground">
            <Loader2 className="h-5 w-5 animate-spin" />
            <span>Loading latest CVEs...</span>
          </div>
        )}
        {error && (
          <div className="flex items-center justify-center h-40 gap-2 text-destructive">
            <AlertTriangle className="h-5 w-5" />
            <span>{error}</span>
          </div>
        )}
        {feed && (
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>CVE ID</TableHead>
                <TableHead>Description</TableHead>
                <TableHead className="text-right">CVSS Score</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {feed.map((cve) => (
                <TableRow key={cve.id}>
                  <TableCell className="font-mono text-xs">{cve.id}</TableCell>
                  <TableCell className="max-w-md truncate">{cve.description}</TableCell>
                  <TableCell className="text-right">
                    <Badge variant={getScoreColor(cve.cvssScore)}>
                        {cve.cvssScore.toFixed(1)} {getSeverity(cve.cvssScore)}
                    </Badge>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        )}
      </CardContent>
    </Card>
  );
}
