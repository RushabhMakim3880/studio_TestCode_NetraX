
'use client';

import { useState } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { Loader2, AlertTriangle, Sparkles, Wand, Bot, Code, Network } from 'lucide-react';
import { generateCustomMalware, type CustomMalwareGeneratorOutput } from '@/ai/flows/custom-malware-generator-flow';

const malwareFeatures = [
    { id: 'keylogger', label: 'Keylogger' },
    { id: 'ransomware', label: 'Ransomware (Simulation)' },
    { id: 'reverse_shell', label: 'Reverse Shell' },
    { id: 'persistence', label: 'Persistence Mechanism' },
    { id: 'file_exfiltration', label: 'File Exfiltration' },
    { id: 'credential_theft', label: 'Credential Theft (e.g., from browser)' },
];

const formSchema = z.object({
  features: z.array(z.string()).refine((value) => value.some((item) => item), {
    message: 'You have to select at least one feature.',
  }),
  targetOs: z.enum(['Windows', 'Linux', 'macOS']),
  evasionTechniques: z.string().min(10, { message: 'Please describe at least one evasion technique.' }),
});

export function CustomMalwareGenerator() {
  const [result, setResult] = useState<CustomMalwareGeneratorOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      features: ['reverse_shell', 'persistence'],
      targetOs: 'Windows',
      evasionTechniques: 'Inject into explorer.exe and use encrypted strings to avoid static analysis.',
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setResult(null);
    setError(null);
    try {
      // Map the feature IDs back to labels for the AI prompt
      const featureLabels = values.features.map(id => malwareFeatures.find(f => f.id === id)?.label || id);
      const response = await generateCustomMalware({
          ...values,
          features: featureLabels,
      });
      setResult(response);
    } catch (err) {
      setError('Failed to generate malware concept. The AI may have refused the request due to safety policies.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center gap-3">
            <Wand className="h-6 w-6" />
            <CardTitle>AI Malware Concept Generator</CardTitle>
        </div>
        <CardDescription>Design a conceptual malware payload by specifying its features and behaviors.</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid md:grid-cols-2 gap-8">
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                 <div>
                    <Label className="font-semibold">Core Features</Label>
                    <p className="text-sm text-muted-foreground mb-2">Select the capabilities for your malware.</p>
                    <Controller
                        control={form.control}
                        name="features"
                        render={({ field }) => (
                            <div className="grid grid-cols-2 gap-2">
                            {malwareFeatures.map((item) => (
                                <div key={item.id} className="flex items-center space-x-2">
                                <Checkbox
                                    id={item.id}
                                    checked={field.value?.includes(item.id)}
                                    onCheckedChange={(checked) => {
                                    return checked
                                        ? field.onChange([...(field.value || []), item.id])
                                        : field.onChange(
                                            field.value?.filter((value) => value !== item.id)
                                        );
                                    }}
                                />
                                <label htmlFor={item.id} className="text-sm font-medium leading-none">
                                    {item.label}
                                </label>
                                </div>
                            ))}
                            </div>
                        )}
                    />
                    {form.formState.errors.features && <p className="text-sm text-destructive mt-2">{form.formState.errors.features.message}</p>}
                </div>

                <div>
                    <Label className="font-semibold">Target OS</Label>
                     <Controller
                        control={form.control}
                        name="targetOs"
                        render={({ field }) => (
                            <RadioGroup onValueChange={field.onChange} defaultValue={field.value} className="flex gap-4 mt-2">
                                <div className="flex items-center space-x-2"><RadioGroupItem value="Windows" id="os-windows" /><Label htmlFor="os-windows">Windows</Label></div>
                                <div className="flex items-center space-x-2"><RadioGroupItem value="Linux" id="os-linux" /><Label htmlFor="os-linux">Linux</Label></div>
                                <div className="flex items-center space-x-2"><RadioGroupItem value="macOS" id="os-macos" /><Label htmlFor="os-macos">macOS</Label></div>
                            </RadioGroup>
                        )}
                    />
                </div>

                 <div>
                    <Label htmlFor="evasion" className="font-semibold">Evasion Techniques</Label>
                    <p className="text-sm text-muted-foreground mb-2">Describe how it should avoid detection.</p>
                     <Controller
                        control={form.control}
                        name="evasionTechniques"
                        render={({ field }) => (
                             <Textarea id="evasion" placeholder="e.g., 'Run in memory only, use process injection...'" {...field} />
                        )}
                    />
                     {form.formState.errors.evasionTechniques && <p className="text-sm text-destructive mt-2">{form.formState.errors.evasionTechniques.message}</p>}
                </div>
                
                <Button type="submit" disabled={isLoading} className="w-full">
                    {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Sparkles className="mr-2 h-4 w-4"/>}
                    Generate Concept
                </Button>
            </form>

            <div className="space-y-4">
                 <Label className="font-semibold">Generated Concept</Label>
                 <div className="h-full min-h-[400px] border rounded-md p-4 bg-primary/20 space-y-4">
                    {isLoading && <div className="flex items-center justify-center h-full text-muted-foreground"><Loader2 className="h-6 w-6 animate-spin" /></div>}
                    {error && <div className="text-destructive flex items-center gap-2"><AlertTriangle className="h-4 w-4" />{error}</div>}
                    {!isLoading && !result && <div className="text-muted-foreground text-center flex flex-col items-center justify-center min-h-[300px]"><Bot className="h-10 w-10 mb-2"/>Your generated malware concept will appear here.</div>}
                    
                    {result && (
                        <div className="space-y-4 animate-in fade-in">
                            <h3 className="text-xl font-bold text-accent">{result.malwareName}</h3>
                            <p className="text-sm text-muted-foreground">{result.description}</p>
                            
                            <div>
                                <h4 className="font-semibold flex items-center gap-2 mb-2"><Code className="h-4 w-4" /> Pseudo-Code / Logic</h4>
                                <pre className="bg-background/50 p-3 rounded-md text-xs text-foreground overflow-y-auto max-h-40 font-mono">
                                    <code>{result.pseudoCode}</code>
                                </pre>
                            </div>

                             <div>
                                <h4 className="font-semibold flex items-center gap-2 mb-2"><Network className="h-4 w-4" /> Suggested C2</h4>
                                <p className="text-sm text-muted-foreground">{result.suggestedC2}</p>
                            </div>
                        </div>
                    )}
                 </div>
            </div>
        </div>
      </CardContent>
    </Card>
  );
}
