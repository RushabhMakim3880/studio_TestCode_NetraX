'use client';

import { useState } from 'react';
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { suggestExploits, type ExploitSuggesterOutput } from '@/ai/flows/exploit-suggester-flow';
import { Loader2, AlertTriangle, Bug, Star } from 'lucide-react';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const formSchema = z.object({
  product: z.string().min(3, { message: 'Product name must be at least 3 characters.' }),
  version: z.string().min(1, { message: 'Version is required.' }),
});

export function ExploitSuggester() {
  const [result, setResult] = useState<ExploitSuggesterOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      product: 'Apache HTTP Server',
      version: '2.4.52',
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setResult(null);
    setError(null);
    try {
      const response = await suggestExploits(values);
      setResult(response);
    } catch (err) {
      setError('Failed to suggest exploits. Please try again.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center gap-3">
            <Bug className="h-6 w-6" />
            <CardTitle>Exploit Suggester</CardTitle>
        </div>
        <CardDescription>Get AI-suggested public exploits for a given software product and version.</CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <div className="grid md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="product"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Product</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g., Microsoft IIS" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="version"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Version</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g., 10.0" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <Button type="submit" disabled={isLoading} className="w-full md:w-auto">
              {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Suggest Exploits
            </Button>
          </form>
        </Form>
        <div className="mt-6">
            {isLoading && <div className="flex items-center justify-center p-8"><Loader2 className="h-8 w-8 animate-spin text-muted-foreground" /></div>}
            {error && <div className="text-destructive flex items-center gap-2"><AlertTriangle className="h-4 w-4" />{error}</div>}
            
            {result && (
                <div>
                    <h3 className="text-lg font-semibold mb-2">Suggested Exploits ({result.exploits.length} found)</h3>
                    {result.exploits.length > 0 ? (
                        <Accordion type="multiple" className="w-full">
                            {result.exploits.map((exploit, index) => (
                                <AccordionItem value={`item-${index}`} key={index}>
                                <AccordionTrigger>
                                    <div className="flex items-center gap-3 flex-1 text-left">
                                        <span className="font-mono text-sm">{exploit.cveId}</span>
                                        <span className="text-muted-foreground truncate flex-1">{exploit.description}</span>
                                    </div>
                                </AccordionTrigger>
                                <AccordionContent className="space-y-3 pl-2">
                                    <div>
                                        <p className="font-semibold">Description</p>
                                        <p className="text-muted-foreground">{exploit.description}</p>
                                    </div>
                                    <div>
                                        <p className="font-semibold">Notes</p>
                                        <p className="text-muted-foreground">{exploit.notes}</p>
                                    </div>
                                    <div>
                                        <p className="font-semibold">Exploitability Score</p>
                                        <div className="flex items-center gap-1">
                                            {[...Array(10)].map((_, i) => (
                                                <Star key={i} className={`h-4 w-4 ${i < exploit.exploitabilityScore ? 'text-amber-400 fill-amber-400' : 'text-muted-foreground/30'}`} />
                                            ))}
                                             <span className="font-bold ml-2">{exploit.exploitabilityScore}/10</span>
                                        </div>
                                    </div>
                                </AccordionContent>
                                </AccordionItem>
                            ))}
                        </Accordion>
                    ) : (
                        <div className="text-center text-muted-foreground py-10 flex flex-col items-center gap-2">
                           <p>No potential public exploits were suggested for this product version.</p>
                        </div>
                    )}
                </div>
            )}
        </div>
      </CardContent>
    </Card>
  );
}
