
'use client';

import { useState } from 'react';
import { useForm, useFieldArray } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { generateExploitChain, type ExploitChainAssistantOutput } from '@/ai/flows/exploit-chain-assistant-flow';
import { Loader2, AlertTriangle, Link2, Sparkles, PlusCircle, Trash2, Bot } from 'lucide-react';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Badge } from '@/components/ui/badge';
import { Label } from '@/components/ui/label';

const vulnerabilitySchema = z.object({
  id: z.string(),
  name: z.string().min(3, { message: 'Name must be at least 3 characters.' }),
  description: z.string().min(10, { message: 'Description must be at least 10 characters.' }),
  severity: z.enum(['Critical', 'High', 'Medium', 'Low', 'Informational']),
});

const formSchema = z.object({
  vulnerabilities: z.array(vulnerabilitySchema).min(2, { message: 'Please add at least two vulnerabilities to analyze.' }),
});

type Vulnerability = z.infer<typeof vulnerabilitySchema>;

export function ExploitChainAssistant() {
  const [result, setResult] = useState<ExploitChainAssistantOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      vulnerabilities: [
        { id: '1', name: 'Reflected XSS on search page', description: 'User input in the search query parameter is not sanitized and reflected back, allowing script execution.', severity: 'Medium' },
        { id: '2', name: 'Public S3 Bucket', description: 'An AWS S3 bucket containing marketing assets is publicly writable.', severity: 'Low' },
      ],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "vulnerabilities",
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setResult(null);
    setError(null);

    try {
      const response = await generateExploitChain({ vulnerabilities: values.vulnerabilities });
      setResult(response);
    } catch (err) {
      setError('Failed to analyze exploit chains. The AI may have refused the request.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center gap-3">
            <Link2 className="h-6 w-6" />
            <CardTitle>AI Exploit Chain Assistant</CardTitle>
        </div>
        <CardDescription>Add multiple vulnerabilities and let the AI find creative ways to chain them together.</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid md:grid-cols-2 gap-8">
            <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                <div>
                  <Label>Identified Vulnerabilities</Label>
                  <div className="space-y-4 mt-2">
                    {fields.map((field, index) => (
                      <Card key={field.id} className="p-4 bg-primary/20 relative">
                        <div className="space-y-3">
                          <FormField control={form.control} name={`vulnerabilities.${index}.name`} render={({ field }) => ( <FormItem> <FormControl><Input placeholder="Vulnerability Name (e.g., SQL Injection)" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>
                          <FormField control={form.control} name={`vulnerabilities.${index}.description`} render={({ field }) => ( <FormItem> <FormControl><Input placeholder="Brief description..." {...field} /></FormControl> <FormMessage /> </FormItem> )}/>
                          <FormField control={form.control} name={`vulnerabilities.${index}.severity`} render={({ field }) => ( <FormItem><FormControl><Select onValueChange={field.onChange} defaultValue={field.value}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="Critical">Critical</SelectItem><SelectItem value="High">High</SelectItem><SelectItem value="Medium">Medium</SelectItem><SelectItem value="Low">Low</SelectItem><SelectItem value="Informational">Informational</SelectItem></SelectContent></Select></FormControl><FormMessage /></FormItem> )}/>
                        </div>
                        <Button type="button" variant="ghost" size="icon" className="absolute top-1 right-1 h-7 w-7" onClick={() => remove(index)}><Trash2 className="h-4 w-4 text-destructive" /></Button>
                      </Card>
                    ))}
                  </div>
                  <Button type="button" variant="outline" size="sm" className="mt-2" onClick={() => append({ id: crypto.randomUUID(), name: '', description: '', severity: 'Medium' })}><PlusCircle className="mr-2 h-4 w-4" /> Add Vulnerability</Button>
                </div>
                 {form.formState.errors.vulnerabilities && <FormMessage>{form.formState.errors.vulnerabilities.message}</FormMessage>}
                <Button type="submit" disabled={isLoading} className="w-full">
                    {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Sparkles className="mr-2 h-4 w-4" />}
                    Analyze Chains
                </Button>
            </form>
            </Form>

             <div className="space-y-4">
                <Label>Potential Exploit Chains</Label>
                <div className="h-full min-h-[400px] border rounded-md p-4 bg-primary/20 space-y-4 overflow-y-auto">
                  {isLoading && <div className="flex items-center justify-center h-full text-muted-foreground"><Loader2 className="h-6 w-6 animate-spin" /></div>}
                  {error && <div className="text-destructive flex items-center gap-2"><AlertTriangle className="h-4 w-4" />{error}</div>}
                  {!isLoading && !result && <div className="text-muted-foreground text-center flex flex-col items-center justify-center min-h-[300px]"><Bot className="h-10 w-10 mb-2" />Generated attack chains will appear here.</div>}
                  
                  {result && (
                    <Accordion type="multiple" className="w-full" defaultValue={result.chains.map(c => c.title)}>
                      {result.chains.map((chain, index) => (
                        <AccordionItem value={chain.title} key={index}>
                          <AccordionTrigger className="text-base text-left font-semibold hover:no-underline">{chain.title}</AccordionTrigger>
                          <AccordionContent>
                              <p className="text-sm text-muted-foreground mb-4">{chain.description}</p>
                              <div className="space-y-2">
                                  <p className="text-xs font-semibold">VULNERABILITIES USED IN THIS CHAIN:</p>
                                  {chain.vulnerabilityIds.map(id => {
                                      const vuln = form.getValues('vulnerabilities').find(v => v.id === id);
                                      return vuln ? <Badge key={id} variant="secondary">{vuln.name}</Badge> : null;
                                  })}
                              </div>
                          </AccordionContent>
                        </AccordionItem>
                      ))}
                    </Accordion>
                  )}
                   {result && result.chains.length === 0 && <p className="text-muted-foreground text-center pt-8">No plausible exploit chains were identified from the given vulnerabilities.</p>}
                </div>
            </div>
        </div>
      </CardContent>
    </Card>
  );
}
